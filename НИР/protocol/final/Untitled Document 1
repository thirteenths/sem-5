   \subsection{Механизм обмена ключами}
    
    Для шифрования ключей используются следующие алгоритмы:
    
    \begin{itemize}
    	\item RSA
    	--- работа данного алгоритма строится на генерации ключей, открытого и закрытого. С помощью открытого ключа сообщение шифруется, а закрытым расшифруется.За время своего существования RSA-шифрование было вдоль и поперек изучено, поэтому метод не может считаться эффективным и безопасным. Алгоритм подразумевает, что для его использования потребуется затрачивать какое-то время, что является крупным минусом на сегодняшний день.;
    	\item DH (Diffie–Hellman)
    	--- позволяющий двум и более сторонам получить общий секретный ключ, используя незащищенный от прослушивания канал связи. Полученный ключ используется для шифрования дальнейшего обмена с помощью алгоритмов симметричного шифрования.
    	Схема открытого распределения ключей, предложенная Диффи и Хеллманом, произвела настоящую революцию в мире шифрования, так как снимала основную проблему классической криптографии — проблему распределения ключей. .
    \end{itemize}

	\begin{table}[h]
		\begin{center}
					\caption{Классификация по шифровантю ключей}
					\label{tbl:classif_key}
					\begin{tabular}{|p{5cm}|p{6cm}|p{4cm}|}
					\hline \textbf{Версия} & \textbf{Алгоритмы}  \\
					\hline \textbf{TLS 1.2} & \textbf{RSA} \\
					\hline \textbf{TLS 1.3} & \textbf{RSA, DH} \\
					\hline
		       \end{tabular}
		\end{center} 		
				
    \end{table}

    \subsection{Время выпонения Handshake}
    
    В приведённом выше объяснении Handshake разделено на десять отдельных этапов. В действительности же многие из этих вещей происходят одновременно, поэтому их часто объединяют в группы и называют фазами.
    
    У Handshake TLS 1.2 можно выделить две фазы. Иногда могут потребоваться дополнительные, но когда речь идёт о количестве, по умолчанию подразумевается оптимальный сценарий.
    
    В отличие от 1.2, Handshake TLS 1.3 укладывается в одну фазу, хотя вернее будет сказать в полторы, но это всё равно значительно быстрее, чем TLS 1.2.
    
    
    \begin{table}[h]
    	\begin{center}
    		\caption{Классификация версий по времение cоединения Handshake}
    		\label{tbl:classif_speed}
    		\begin{tabular}{|p{5cm}|p{6cm}|p{4cm}|}
    			\hline \textbf{Версия} & \textbf{Время соединения}  \\
    			\hline \textbf{TLS 1.2} & \textbf{300ms} \\
    			\hline \textbf{TLS 1.3} & \textbf{200ms} \\
    			\hline
    		\end{tabular}
    	\end{center} 		
    	
    \end{table}
    
    
    
    
    \subsection{TLS 1.2}
        
        \begin{figure}[h]
        	\centering
        	\includegraphics[width=\textwidth,height=25cm,keepaspectratio]{inc/img/tls12con.png}
        	\caption{TLS 1.2. Поток сообщений при полном согласовании.} \label{fig:tls12con}
        \end{figure}
        
        Handshake 
        
        \begin{enumerate}
        	
        	\item Первое сообщение называется «Client Hello». В этом сообщении перечислены возможности клиента, чтобы сервер мог выбрать шифронабор, который будет использовать для связи. Также сообщение включает в себя большое случайно выбранное простое число, называемое «случайным числом клиента».
        	
        	\itemСервер вежливо отвечает сообщением «Server Hello». Там он сообщает клиенту, какие параметры соединения были выбраны, и возвращает своё случайно выбранное простое число, называемое «случайным числом сервера». Если клиент и сервер не имеют общих шифронаборов, то соединение завершается неудачно.
        	
        	\itemВ сообщении «Certificate» сервер отправляет клиенту свою цепочку SSL-сертификатов, включающую в себя листовой и промежуточные сертификаты. Получив их, клиент выполняет несколько проверок для верификации сертификата. Клиент также должен убедиться, что сервер обладает закрытым ключом сертификата, что происходит в процессе обмена/генерации ключей.
        	
        	\itemЭто необязательное сообщение, необходимое только для определённых методов обмена ключами (например для алгоритма Диффи-Хеллмана), которые требуют от сервера дополнительные данные.
        	
        	\itemСообщение «Server Hello Done» уведомляет клиента, что сервер закончил передачу данных.
        	
        	\itemЗатем клиент участвует в создании сеансового ключа. Особенности этого шага зависят от метода обмена ключами, который был выбран в исходных сообщениях «Hello». Так как мы рассматриваем RSA, клиент сгенерирует случайную строку байтов, называемую секретом (pre-master secret), зашифрует её с помощью открытого ключа сервера и передаст обратно.
        	
        	\itemСообщение «Change Cipher Spec» позволяет другой стороне узнать, что сеансовый ключ сгенерирован и можно переключиться на зашифрованное соединение.
        	
        	\itemЗатем отправляется сообщение «Finished», означающее, что на стороне клиента рукопожатие завершено. С этого момента соединение защищено сессионным ключом. Сообщение содержит данные (MAC), с помощью которых можно убедиться, что рукопожатие не было подделано.
        	
        	\itemТеперь сервер расшифровывает pre-master secret и вычисляет сеансовый ключ. Затем отправляет сообщение «Change Cipher Spec», чтобы уведомить, что он переключается на зашифрованное соединение.
        	
        	\itemСервер также отправляет сообщение «Finished», используя только что сгенерированный симметричный сеансовый ключ, и проверяет контрольную сумму для проверки целостности всего     рукопожатия.
        	
        \end{enumerate}
        %\begin{itemize}
        %	\item обмен сообщениями hello для согласования алгоритмов, обмена случайными значениями и проверки возобновляемости сессии;
        	
        %	\item обмен требуемыми криптографическими параметрами, позволяющими клиенту и серверу согласовать предварительный секрет (premaster secret);
        	
        %	\item обмен сертификатами и криптографической информацией для обеспечения возможности взаимной аутентификации клиента и сервера;
        	
        %	\item генерация первичного секрета (master secret) из предварительного (premaster secret) и переданных друг другу случайных значений;
        	
        %	\item предоставление параметров безопасности уровню записи;
        	
        %	\item предоставление клиенту и серверу возможности проверить, что партнер выбрал такие же параметры безопасности, а согласование происходило без вмешательства злоумышленников.
        	
        %\end{itemize}
        
        
        \subsection{TLS 1.3}
        
        \begin{figure}[h]
        	\centering
        	\includegraphics[width=\textwidth,height=25cm,keepaspectratio]{inc/img/tls13con.png}
        	\caption{TLS 1.3. Поток сообщений при полном согласовании.} \label{fig:tls13con}
        \end{figure}
    
    \begin{enumerate}
    	\item
    	Как и в случае TLS 1.2, сообщение «Client Hello» запускает рукопожатие, но на этот раз оно содержит гораздо больше информации. TLS 1.3 сократил число поддерживаемых шифров с 37 до 5. Это значит, что клиент может угадать, какое соглашение о ключах или протокол обмена будет использоваться, поэтому в дополнение к сообщению отправляет свою часть общего ключа из предполагаемого протокола.
    	
    	\itemСервер ответит сообщением «Server Hello». Как и в рукопожатии 1.2, на этом этапе отправляется сертификат. Если клиент правильно угадал протокол шифрования с присоединёнными данными и сервер на него согласился, последний отправляет свою часть общего ключа, вычисляет сеансовый ключ и завершает передачу сообщением «Server Finished».
    	
    	\itemТеперь, когда у клиента есть вся необходимая информация, он верифицирует SSL-сертификат и использует два общих ключа для вычисления своей копии сеансового ключа. Когда это сделано, он отправляет сообщение «Client Finished».
    	
    \end{enumerate}
    
